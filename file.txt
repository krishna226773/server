COnstructor: It is a method of a class it will be called while creating object of the class, by default there is default constructor.
             We can overload constructor as many as we want.
             
             
Specialization: This we acheived using inheritance.
Generalization: this we aceived using interface.

Inheritance: It is acquiring the features of a existing class.
             We can't convert parent object to child class reference varaible.
             we can convert child object to parent class reference variable. But we are able to access only parent class methods and variables.
             
 When you extends child class with parent class, that means child class constructor is invoking parent class constructor using super keyword, if you override parent class constructor then you must define the parent class constructor in the child class constructor at very first line.
 
Based on the reference variable the object will be defined by the JVM.

This keyword reference to current class.
Super keyword is reference to parent class or super class.

PLOYMORPHISM: In Java polymorphism achieved using methods overriding as well as method overloading(one name with many forms)
           Overriding:
                      Redefining methods that are already present in super class in the sub class is called overriding, While overriding methods the name, arguments and return type must be same.
                      When a super class reference varaible is pointing to object of child class and invoking override method then child class method will be called, this is called dynamic dispatch of method.
                      when the method is not overrided and child class method is called it will throw compile time error.
                      
 A Super class reference can hold object of subclass but it can call those methods which are define in super class. You can't call those method that is there in the subclass.
 
 We can't override final and static methods. While overriding methods the name, arguments and return type must be same.
 
 You can override methods(child class) with less scope access modifier for the methods more strict access modifier(parent methods).
 
 Overloading can be acheived in the same class and also  in the subclass, it is used for compile time polymorphism.
 Overriding can be acheived via inheritance, it is used for run time polymorphism.
 
 Overloading:
             Redefining methods that are already present in the same class or super class but the parameter signature must be different
             Signature is the combination of method name and parameter list.
             
 Abstract class:
                We can't create objects for abstract classes, but we can create reference for abstract class.
                
                If a class has a abstract method then that class should be declared as a abstract class.
                Abstract class can have 0 or more abstract methods.
                
                If subclass is extends the abstract class then that subclass will also become abstract class untill when you define abstract methods that are define in abstract class.
                
                Abstract classed meant only for inheritance.
                
                Abstract classes are useful for defining standards and imposing standards.
                subclass that is extended from the abstract class should follow the standards.
                
If a class is final it can't be extended.
We can't make abstract class and abstract methods as final and static.
A subclass of non-abstract super can be abstract
                      
 
             
    
