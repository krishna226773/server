COnstructor: It is a method of a class it will be called while creating object of the class, by default there is default constructor.
             We can overload constructor as many as we want.
             
             
Specialization: This we acheived using inheritance.
Generalization: this we aceived using interface.

Inheritance: It is acquiring the features of a existing class.
             We can't convert parent object to child class reference varaible.
             we can convert child object to parent class reference variable. But we are able to access only parent class methods and variables.
             
 When you extends child class with parent class, that means child class constructor is invoking parent class constructor using super keyword, if you override parent class constructor then you must define the parent class constructor in the child class constructor at very first line.
 
Based on the reference variable the object will be defined by the JVM.

This keyword reference to current class.
Super keyword is reference to parent class or super class.

PLOYMORPHISM: In Java polymorphism achieved using methods overriding as well as method overloading(one name with many forms)
           Overriding:
                      Redefining methods that are already present in super class in the sub class is called overriding, While overriding methods the name, arguments and return type must be same.
                      When a super class reference varaible is pointing to object of child class and invoking override method then child class method will be called, this is called dynamic dispatch of method.
                      when the method is not overrided and child class method is called it will throw compile time error.
                      
 A Super class reference can hold object of subclass but it can call those methods which are define in super class. You can't call those method that is there in the subclass.
 
 We can't override final and static methods. While overriding methods the name, arguments and return type must be same.
 
 You can override methods(child class) with less scope access modifier for the methods more strict access modifier(parent methods).
 
 Overloading can be acheived in the same class and also  in the subclass, it is used for compile time polymorphism.
 Overriding can be acheived via inheritance, it is used for run time polymorphism.
 
 Overloading:
             Redefining methods that are already present in the same class or super class but the parameter signature must be different
             Signature is the combination of method name and parameter list.
             
 Abstract class:
                We can't create objects for abstract classes, but we can create reference for abstract class.
                
                If a class has a abstract method then that class should be declared as a abstract class.
                Abstract class can have 0 or more abstract methods.
                
                If subclass is extends the abstract class then that subclass will also become abstract class untill when you define abstract methods that are define in abstract class.
                
                Abstract classed meant only for inheritance.
                
                Abstract classes are useful for defining standards and imposing standards.
                subclass that is extended from the abstract class should follow the standards.
                
If a class is final it can't be extended.
We can't make abstract class and abstract methods as final and static.
A subclass of non-abstract super can be abstract.
We can create array of interface.
Variables in Interface static and final.
To update exisiting interfaces we can use of default methods, if you use abstract methods in interface already implemented methods of interface will become abstarct will not work, so to overcome this problem we can use default methods in interface if you want override this default you can override that.

private methods can also be implemented in interface but that private method can be used only in default methods.


Inner classes:
              Nested inner class
              Local inner class
              Anonymous inner class
              Static inner class
              
Nested Inner class:
                 Inner class can access the members of outer class
                 But outer can't access the members of inner class unless you have created object of inner class.
                
Anonymous class:
                This class can be defined at the time of creation of object itself.
                Usually these are useful for abtract classes and interfaces.
                
Static variables:
                Static varibles are useful for representing information and data related to class.
                if you have small value that related to class go for static variables.
                If you want to do some process go for static methods.
                If you want data to group that related to class go for static nested class.
                
                Static members are shared by all the objects of the class.
                
                Static variables and static methods are available in the methods area once the class is loaded.
                
                
                If you want intialize something for static members we can use static blocks.
        static block 
                Initilizing static variables of the class, write a set of code that you want execute during the class loading in memory.
                We can't override static methods.
                We can overload static methods.
                
Final Variables:
              Capital words for final variable
              int MIN = 10;
              There are three ways to initialize final variables in java
              Initialize while creating variable.
              initialize in static block
              Initialize in constructor at every we should initialize.
              Final variable can't be modified once initialized.
              
              Final method can't be overrided.
              Final classes can't be extended.
              
Runtime errors:
               cause of these errors are bad input and Resources are not sufficient.
               Programmer say my program will work except in the cases the user gives some wrong values. To handle these errors we conventioned it as exception handling.
            
Exception handling:
                  Handling runtime errors while using the program by user is called exception handling (In except cases)
                  
                  runtime time errors is handled by try and catch block
                  
                  Finally block will be executed, it won't depends on rumtime errors. it is useful for cleanup process.
                  
Checked Exception:
                  We must handle exception by using try and catch block
                  ClassNotFoundException
                  IOException
                  InterruptedException
                  NumberFormatException
                  
 UnChecked Exception:
                     JVM will not force to handle exception.
                     RunTimeException
                         Arithmetic Exception
                         IndexOutOfBoundException
                         NullPointerException.
                      
 To throw our own exception we use throw and throws keywords.
 
 throws keyword is used for throwing
 throw is used for defining exception.
 
 Checked exception must catch by using try and catch block
 throws exception must write for checked Exception only
 
 If the method is not handling or throwing an exception to close that resource we use finally block.
 If we aren't sure handling all exceptions then we write finally block.
 
 Program and its stack one entity, it is actual program, this is called context of a program.
 
 Whenever program need s resource acquire it, if you don't need the resource release.
 
 We want to make clean up always done with the help of finally block.
 
 At some point exception rises if we handling the exception the remaining part of the program still in use to say to JVM that method is not in use we must clean the method by using finally block. By doing f.close();
 
 To avoid using of finally block we can use try with resource concept
 like try(FileReader file = new FileReader("my.txt"))
 
 Object -> Throwable -> Exception(1) -> Error(2)
 
 MutliProgramming:
                  Run mutliple programs on a single computer is called multiprogramming

Multi-user: multiple users using single machine.
Multi Tasking or Mutli Threading: single user running mutliple programs on a machine.

Thread class and Runnable interface are the two things avaliable to acheive mutli threading.
If we are extending some other class and want use threading then implements runnable interface. if not extending some other class then extend Thread class.

AFter extending Thread class we must override run method to acheive a thread.
run is the starting point of the thread.
to start the thread we should call start method.

Wait state in Thread:
                     It has to wait for any resource that program want once the resource is free it will notify by another thread and will go to the request I/O state to get resource. If resource is blocked then it will go to wait state.
                     
Sleep state in thread: 
                      we can slow down the speeed of the program by using sleep state in thread by mentioning the time.
                      
 States in thread class:
                      NEW->RUNNABLE -->Waiting --> Timied Waiting --> Blocked ->TERMINATED
                      
JVM has scheduler that will threads in priority order 
priority numbers are 1 to 10 
5 is the default priority.
With the highest priority number JVM executes that thread at first than the other threads.

setDeamon(boolean b) : Background thread for least priority.


THREAD CLASS:
            Constructors of thread class
                                        Thread()
                                        Thread(Runnable r)
                                        Thread(String name)
                                        Thread(Runnable r, String name)
                                        
   Daemon thread in Java is a low-priority thread that runs in the background to perform tasks such as garbage collection.
   If JVM finds a running daemon thread, it terminates the thread and after shutdown it. JVM does not care whether the Daemon thread is running or not.
   setDaemon(true);
   JOin Thread:
               It is used when we want to wait start to completion of run thread in object class.
          
Yield method:
              This method of thread class causes the currently executing thread object to temporarily pause and allow other threads to execute.
                                       




 
             
    
